namespace = RabbitFX

[Constants]
persist global $censor = 0
global $menu = 1
global $menuCheck = 1
global $h = 0.0
global $s = 0.0
global $v = 0.0
global $brightness = 1.0
global $interpolate = 1.0

[KeyCensor]
key = no_modifiers \
type = cycle
$censor = 0,1

[Present]
if $menu != $menuCheck
	$menu = $menuCheck
endif
$menuCheck = 1

[TextureOverrideMenu]
hash = 7017fed2
$menuCheck = 0

[CommandListRun]
local $temp217x = x217
local $temp217y = y217
local $temp217z = z217
local $temp217w = w217
local $temp172y = y172
x217 = ($h / 360.0) * $interpolate
y217 = ($s / 100.0) * $interpolate
z217 = ($v / 100.0) * $interpolate
w217 = $brightness
y172 = 1
post ps-t17 = null
post ps-t18 = null
post $h = 0.0
post $s = 0.0
post $v = 0.0
post $brightness = 1.0
post $interpolate = 1.0
post x217 = $temp217x
post y217 = $temp217y
post z217 = $temp217z
post w217 = $temp217w
post y172 = $temp172y

; Debug ---------------------------------------------------

;[ShaderOverrideDebug]
;hash = f0679e5cc7282ad4
;hash = 536811a46b71200b
;hash = 3203f5e1b91ab239
;Resource\Debug_cb\cb = ps-cb4

; Diffuse o0 ----------------------------------------------

[ShaderRegexDiffuseO0]
shader_model = ps_4_0 ps_5_0
temps = shift color tmask override ini treg0 treg1 treg2 treg3
;run = CommandListSetVariables

[ShaderRegexDiffuseO0.Pattern]
(?<body>(?:dcl_input_ps\slinear\s(?<texcoord0>v\d)\.xy\n)(?:.*\n)*(?:dcl_output\so0.xyzw\ndcl_output\so1.xyzw\ndcl_output\so2.xyzw\ndcl_output\so3.xyzw\ndcl_output\so4.xyzw\ndcl_output\so5.xyzw\ndcl_output\so6.xyzw\n)(?:.*\n)*(?:endif\n))(?<output>\s*mov\so0\.xyz.*\n)(?<post>mov\so0\.w.*\n)

[ShaderRegexDiffuseO0.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_sampler s15, mode_default

[ShaderRegexDiffuseO0.Pattern.Replace]
; Recreating the header
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n 
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n
    lt ${treg0}.x, ${tmask}.w, l(1.0)\n
    if_nz ${treg0}.x\n
      discard_z l(0)\n
    endif\n
  endif\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n

    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n

;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, ${texcoord0}.xy, t17.xyzw, s0\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
      mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
; Calculate final colour and glow
      mul ${treg0}.xyz, ${color}.xyz, ${color}.w\n
      mul ${treg0}.xyz, ${treg0}.xyz, ${shift}.w\n
      mov o0.xyz, ${treg0}.xyz\n
    else\n
      ${output}\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
  ${output}
endif\n
${post}

; ChouriHair

[ShaderRegexChouriHairDiffuseO0]
shader_model = ps_4_0 ps_5_0
temps = shift color override ini treg0 treg1 treg2 treg3
;run = CommandListSetVariables

[ShaderRegexChouriHairDiffuseO0.Pattern]
(?<body>(?:dcl_input_ps\slinear\s(?<texcoord0>v\d)\.xy\n)(?:.*\n)*(?:dcl_output\so0.xyzw\ndcl_temps\s\d+\n)(?:.*\n)*(?:mad\sr\d\.[xyzw]+.*\nmin\sr\d\.[xyzw]+.*\n))(?<output>mov\so0.xyz.*\n)

[ShaderRegexChouriHairDiffuseO0.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexChouriHairDiffuseO0.Pattern.Replace]
; Recreating the header
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n 
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n

    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n

;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, ${texcoord0}.xy, t17.xyzw, s0\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
      mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
; Calculate final colour and glow
      mul ${treg0}.xyz, ${color}.xyz, ${color}.w\n
      mul ${treg0}.xyz, ${treg0}.xyz, ${shift}.w\n
      mov o0.xyz, ${treg0}.xyz\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
  ${output}
endif\n

; Diffuse o3 ----------------------------------------------

[ShaderRegexDiffuseO3]
shader_model = ps_4_0 ps_5_0
temps = shift color ini override treg0 treg1 treg2 treg3
;run = CommandListSetVariables

[ShaderRegexDiffuseO3.Pattern]
(?<body>(?:dcl_input_ps\slinear\s(?<texcoord0>v\d)\.xy\n)(?:.*\n)*(?:dcl_output\so0.xyzw\ndcl_output\so1.xyzw\ndcl_output\so2.xyzw\ndcl_output\so3.xyzw\ndcl_output\so4.xyzw\ndcl_output\so5.xyzw\ndcl_output\so6.xyzw\n)(?:.*\n)*(?:\s*mad.*\n))(?<output>\s*mad\so3\.xyz.*\n)

[ShaderRegexDiffuseO3.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexDiffuseO3.Pattern.Replace]
; Recreating the header
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n

    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n

;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, ${texcoord0}.xy, t17.xyzw, s0\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
        mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
; Calculate final colour and glow
      mul ${treg0}.xyz, ${color}.xyz, ${color}.w\n
      mul ${treg0}.xyz, ${treg0}.xyz, ${shift}.w\n
      mov o3.xyzw, ${color}.xyzw\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
  ${output}\n
endif\n

; eyes

[ShaderRegexEyeDiffuseO3]
shader_model = ps_4_0 ps_5_0
temps = shift color ini override treg0 treg1 treg2 treg3
;run = CommandListSetVariables

[ShaderRegexEyeDiffuseO3.Pattern]
(?<body>(?:dcl_input_ps\slinear\s(?<texcoord0>v\d)\.xy\n)(?:.*\n)*(?:dcl_output\so0.xyzw\ndcl_output\so1.xyzw\ndcl_output\so2.xyzw\ndcl_output\so3.xyzw\ndcl_output\so4.xyzw\ndcl_output\so5.xyzw\ndcl_output\so6.xyzw\n)(?:.*\n)*)(?<output>\s*mov\so3\.xyz.*\n)(?<post>mov\so3\.w.*\n)

[ShaderRegexEyeDiffuseO3.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexEyeDiffuseO3.Pattern.Replace]
; Recreating the header
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n

    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n

;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, ${texcoord0}.xy, t17.xyzw, s0\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
      mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
; Calculate final colour and glow
      mul ${treg0}.xyz, ${color}.xyz, ${color}.w\n
      mul ${treg0}.xyz, ${treg0}.xyz, ${shift}.w\n
      mov o3.xyzw, ${color}.xyzw\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
  ${output}\n
endif\n
${post}

; Carlotta Hair


[ShaderRegexCarlottaDiffuseO3]
shader_model = ps_4_0 ps_5_0
temps = shift color ini override treg0 treg1 treg2 treg3
;run = CommandListSetVariables

[ShaderRegexCarlottaDiffuseO3.Pattern]
(?<body>(?:dcl_input_ps\slinear\s(?<texcoord0>v\d)\.xy\n)(?:.*\n)*(?:dcl_output\so0.xyzw\ndcl_output\so1.xyzw\ndcl_output\so2.xyzw\ndcl_output\so3.xyzw\ndcl_output\so4.xyzw\ndcl_output\so5.xyzw\ndcl_output\so6.xyzw\n)(?:.*\n)*)(?<output>\s*mov\so3\.xyzw\,\sr\d+.*\n)(?<post>mov\so5.*\n)

[ShaderRegexCarlottaDiffuseO3.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexCarlottaDiffuseO3.Pattern.Replace]
; Recreating the header
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, ${texcoord0}.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n

    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n

;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, ${texcoord0}.xy, t17.xyzw, s0\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
      mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
; Calculate final colour and glow
      mul ${treg0}.xyz, ${color}.xyz, ${color}.w\n
      mul ${treg0}.xyz, ${treg0}.xyz, ${shift}.w\n
      mov o3.xyzw, ${color}.xyzw\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
  ${output}\n
endif\n
${post}

; CensorFilter -----------------------------------------

[ShaderRegexCensorFilter]
shader_model = ps_4_0 ps_5_0
temps = menu
x172 = $menu * $censor

[ShaderRegexCensorFilter.Pattern]
(?<func>min\s(?<val>r\d\.\w+),\s(?<cb>cb4\[\d+\])\.\w+,\scb4\[\d+\]\.\w+\n)(?<post>(?:\s*\w+\sr\d\.\w+,\s.*\n)+if_nz\sr\d\.\w+\n(?:\s*\w+\sr\d\.\w+,\s.*\n)+\s*udiv\snull,\sr\d+\.\w+,.*\n(?:\s*\w+\sr\d\.\w+,\s.*\n)+endif(?:\s*\w+\sr\d\.\w+,\s.*\n)+discard_nz\sr\d\.\w+\n)

[ShaderRegexCensorFilter.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexCensorFilter.Pattern.Replace]
\n
ld_indexable(texture1d)(float,float,float,float) ${menu}.xyzw, l(172, 0), t120.xyzw\n
${func}
if_nz ${menu}.x\n  

  mov ${menu}.y, l(0.0)\n

  lt ${menu}.z, ${cb}.x, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.y, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.z, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.w, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  ge ${menu}.z, ${menu}.y, l(2.0)\n

  mov ${menu}.y, l(0.0)\n

  eq ${menu}.w, ${cb}.x, l(1.0)\n
  if_nz ${menu}.w\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  eq ${menu}.w, ${cb}.y, l(0.0)\n
  if_nz ${menu}.w\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  eq ${menu}.w, ${cb}.z, l(0.5)\n
  if_nz ${menu}.w\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  eq ${menu}.w, ${cb}.w, l(-1.0)\n
  if_nz ${menu}.w\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.w, ${menu}.y, l(4.0)\n
  eq ${menu}.w, ${menu}.w, ${menu}.w\n

  if_nz ${menu}.z\n
    mul ${menu}.z, ${menu}.z, ${menu}.w\n
    if_nz ${menu}.z\n
      mov ${val}, l(1.0)\n
    endif\n
  endif\n

endif\n
${post}
\n

; EyeCensorFilter ------------------------------------

[ShaderRegexEyeCensorFilter]
shader_model = ps_4_0 ps_5_0
temps = menu
pre x172 = $menu * $censor

[ShaderRegexEyeCensorFilter.Pattern]
(?<pre>if_nz\sr\d+\.\w+\n(?:.*\n)*)(?<func>\s*min\s(?<val>r\d+\.\w+),\s(?<cb>cb5\[\d+\])\.\w+,\scb5\[\d+\]\.\w+\n)(?<post>(?:\s*\w+\sr\d+\.\w+,\s.+\n)*\s*udiv\snull,\s.+\n(?:\s*\w+\sr\d+\.\w+,\s.+\n)*endif\n(?:\s*\w+\sr\d+\.\w+,\s.+\n)*discard_nz\sr\d\.\w+\n)

[ShaderRegexEyeCensorFilter.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexEyeCensorFilter.Pattern.Replace]
\n
${pre}${func}
ld_indexable(texture1d)(float,float,float,float) ${menu}.xyzw, l(172, 0), t120.xyzw\n
if_nz ${menu}.x\n  

  mov ${menu}.y, l(0.0)\n

  lt ${menu}.z, ${cb}.x, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.y, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.z, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  lt ${menu}.z, ${cb}.w, l(0.9)\n
  if_nz ${menu}.z\n
    add ${menu}.y, ${menu}.y, l(1.0)\n
  endif\n

  ge ${menu}.z, ${menu}.y, l(2.0)\n
  if_nz ${menu}.z\n
    mov ${val}, l(1.0)\n
  endif\n

endif\n
${post}
\n

; SoundTattooCensorFilter -------------------------------

[ShaderRegexSoundTattooCensorFilter]
shader_model = ps_4_0 ps_5_0
temps = menu
pre x172 = $menu * $censor

[ShaderRegexSoundTattooCensorFilter.Pattern]
(?<censor>(?<before>\s*and.*\n\s*discard.*\n\s*mad.*l\()(?:.+)(?<after>\)\n\s*lt.*\n\s*discard.*\n\s*and.*\n))


[ShaderRegexSoundTattooCensorFilter.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexSoundTattooCensorFilter.Pattern.Replace]
\n
  ld_indexable(texture1d)(float,float,float,float) ${menu}.xyzw, l(172, 0), t120.xyzw\n
  if_z ${menu}.x\n
    ${censor}
  else\n
    ${before}-0.15${after}
  endif\n
\n