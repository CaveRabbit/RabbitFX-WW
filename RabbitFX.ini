namespace = RabbitFX

[Constants]
persist global $censor = 0
global $menu = 1
global $h = 0.0
global $s = 0.0
global $v = 0.0
global $brightness = 1.0
global $interpolate = 1.0

[KeyCensor]
key = no_modifiers \
type = cycle
$censor = 0,1

[Present]
post $menu = 1

[ShaderOverrideMenu]
hash = 4e5c7dffda7ab57b
allow_duplicate_hash = overrule
$menu = 0.0

[CommandListRun]
x217 = ($h / 360.0) * $interpolate
y217 = ($s / 100.0) * $interpolate
z217 = ($v / 100.0) * $interpolate
w217 = $brightness
y172 = 1
post ps-t17 = null
post $h = 0.0
post $s = 0.0
post $v = 0.0
post $brightness = 1.0
post $interpolate = 1.0
post x217 = 0
post y217 = 0
post z217 = 0
post w217 = 0
;post y172 = 0

; Diffuse v2 TEXCOORD ----------------------------------

[ShaderRegexDiffuseV2]
shader_model = ps_4_0 ps_5_0
temps = shift color ini
;run = CommandListSetVariables

[ShaderRegexDiffuseV2.Pattern]
(
mov o5\.xyzw.+v9\.zzzz\n
mov o6\.x.+\n
mov o6\.yzw.+\n
)

[ShaderRegexDiffuseV2.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexDiffuseV2.Pattern.Replace]
${0}\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
if_nz ${ini}.y\n
  ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n
  sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, v2.xy, t17.xyzw, s15\n
  if_nz ${color}.xyzw\n
; Hue Shift
    mov r0.zw, l(0,0,-1.000000,0.666667)\n
    mov r1.zw, l(0,0,0,-0.333333)\n
    mov r2.xyzw, ${color}.xyzx\n
    mov r0.xy, r2.zyzz\n
    mov r1.xy, r0.yxyy\n
    lt r2.y, r0.y, r2.z\n
    movc r0.xyzw, r2.yyyy, r0.xyzw, r1.xyzw\n
    lt r1.x, r2.x, r0.x\n
    mov r3.xyz, r0.xywx\n
    mov r3.w, r2.x\n
    mov r0.xyw, r3.wywx\n
    movc r0.xyzw, r1.xxxx, r3.xyzw, r0.xyzw\n
    min r1.x, r0.y, r0.w\n
    add r1.x, r0.x, -r1.x\n
    mad r1.y, r1.x, l(6.000000), l(0.000000)\n
    add r0.y, -r0.y, r0.w\n
    div r0.y, r0.y, r1.y\n
    add r0.y, r0.y, r0.z\n
; HUE
    add r0.z, ${shift}.x, |r0.y|\n
    ge r0.w, r0.z, -r0.z\n
    frc r0.z, |r0.z|\n
    movc r0.z, r0.w, r0.z, -r0.z\n
    ge r0.w, |r0.y|, l(0.266000)\n
    mov r0.w, l(1.0)\n
    movc r0.y, r0.w, r0.z, |r0.y|\n
    add r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
    frc r0.yzw, r0.yyzw\n
    mad r0.yzw, r0.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
    add_sat r0.yzw, |r0.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
    add r0.yzw, r0.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
    add r1.y, r0.x, l(0.000000)\n
; VAL
    add r0.x, r0.x, ${shift}.z\n
    div r1.x, r1.x, r1.y\n
; SAT
    add r1.x, r1.x, ${shift}.y\n
    mad r0.yzw, r1.xxxx, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
    mul ${color}.xyz, r0.yzwy, r0.xxxx\n
; Calculate final colour and glow
    mul o0.xyz, ${color}.xyz, ${color}.w\n
    mul o0.xyz, o0.xyz, ${shift}.w\n
    mov o3.xyz, ${color}.xyz\n
  endif\n
endif\n

; Diffuse v3 TEXCOORD ----------------------------------

[ShaderRegexDiffuseV3]
shader_model = ps_4_0 ps_5_0
temps = shift color ini
;run = CommandListSetVariables

[ShaderRegexDiffuseV3.Pattern]
(
mov o5\.xyzw.+v10\.zzzz\n
mov o6\.x.+\n
mov o6\.yzw.+\n
)

[ShaderRegexDiffuseV3.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexDiffuseV3.Pattern.Replace]
${0}\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
if_nz ${ini}.y\n
  ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n
  sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, v3.xy, t17.xyzw, s15\n
  if_nz ${color}.xyzw\n
; Hue Shift
    mov r0.zw, l(0,0,-1.000000,0.666667)\n
    mov r1.zw, l(0,0,0,-0.333333)\n
    mov r2.xyzw, ${color}.xyzx\n
    mov r0.xy, r2.zyzz\n
    mov r1.xy, r0.yxyy\n
    lt r2.y, r0.y, r2.z\n
    movc r0.xyzw, r2.yyyy, r0.xyzw, r1.xyzw\n
    lt r1.x, r2.x, r0.x\n
    mov r3.xyz, r0.xywx\n
    mov r3.w, r2.x\n
    mov r0.xyw, r3.wywx\n
    movc r0.xyzw, r1.xxxx, r3.xyzw, r0.xyzw\n
    min r1.x, r0.y, r0.w\n
    add r1.x, r0.x, -r1.x\n
    mad r1.y, r1.x, l(6.000000), l(0.000000)\n
    add r0.y, -r0.y, r0.w\n
    div r0.y, r0.y, r1.y\n
    add r0.y, r0.y, r0.z\n
; HUE
    add r0.z, ${shift}.x, |r0.y|\n
    ge r0.w, r0.z, -r0.z\n
    frc r0.z, |r0.z|\n
    movc r0.z, r0.w, r0.z, -r0.z\n
    ge r0.w, |r0.y|, l(0.266000)\n
    mov r0.w, l(1.0)\n
    movc r0.y, r0.w, r0.z, |r0.y|\n
    add r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
    frc r0.yzw, r0.yyzw\n
    mad r0.yzw, r0.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
    add_sat r0.yzw, |r0.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
    add r0.yzw, r0.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
    add r1.y, r0.x, l(0.000000)\n
; VAL
    add r0.x, r0.x, ${shift}.z\n
    div r1.x, r1.x, r1.y\n
; SAT
    add r1.x, r1.x, ${shift}.y\n
    mad r0.yzw, r1.xxxx, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
    mul ${color}.xyz, r0.yzwy, r0.xxxx\n
; Calculate final colour and glow
    mul o0.xyz, ${color}.xyz, ${color}.w\n
    mul o0.xyz, o0.xyz, ${shift}.w\n
    mov o3.xyz, ${color}.xyz\n
  endif\n
endif\n

; CensorFilter -----------------------------------------

[ShaderRegexCensorFilter]
shader_model = ps_4_0 ps_5_0
temps = menu
pre x172 = $menu * $censor

[ShaderRegexCensorFilter.Pattern]
(
\s*min r\d\.\w, r\d\.\w, l\(1\.000000\)\n
\s*add r\d\.\w, r\d\.\w, l\(-0\.333000\)\n
\s*lt r\d\.\w, r\d\.\w, l\(0\.000000\)\n
\s*and r\d\.\w, r\d\.\w, r\d\.\w\n
)
(
\s*discard_nz.*?\n
)

[ShaderRegexCensorFilter.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexCensorFilter.Pattern.Replace]
${1}
\n
  ld_indexable(texture1d)(float,float,float,float) ${menu}.xyzw, l(172, 0), t120.xyzw\n
  if_z ${menu}.x\n
  ${2}
  endif\n
\n

; SoundTattooCensorFilter -------------------------------

;[ShaderRegexSoundTattooCensorFilter]
;shader_model = ps_4_0 ps_5_0
;temps = menu
;pre x172 = $menu * $censor

;[ShaderRegexSoundTattooCensorFilter.Pattern]
;(
;\s*lt r\d\.\w, r\d\.\w, l\(0\.000000\)\n
;\s*and r\d\.\w, r\d\.\w, r\d\.\w\n
;)
;(
;\s*discard_nz.*?\n
;)
;(
;\s*mad r\d\.\w, r\d\.\w, r\d\.\w, l\(-0\.333300\)\n
;\s*lt r\d\.\w, r\d\.\w, l\(0\.000000\)\n
;)
;(
;\s*discard_nz.*?\n)


;[ShaderRegexSoundTattooCensorFilter.InsertDeclarations]
;dcl_resource_texture1d (float,float,float,float) t120

;[ShaderRegexSoundTattooCensorFilter.Pattern.Replace]
;${1}
;\n
;  ld_indexable(texture1d)(float,float,float,float) ${menu}.x, l(172, 0, 0, 0), t120.xyzw\n
;  if_z ${menu}.x\n
;  ${2}
;  endif\n
;\n
;${3}
;\n
;  //Needs more research to isolate the tattoo pattern to discard properly
;  //if_z ${menu}.x\n
;  ${4}
;  //endif\n
;\n